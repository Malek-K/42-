/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_printf.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mkamel <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/01/16 14:15:06 by mkamel            #+#    #+#             */
/*   Updated: 2018/02/21 16:49:57 by mkamel           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/printf.h"
#include "../libft/libft.h"

static void			ft_printf_build(va_list *ap, t_data *arg, intmax_t *octet)
{
//	ft_putnbr(arg->f_field);
//	ft_putendl(" : f_field");
	if (arg->f_field == 1)
		arg->f_str = ft_strdup(ft_type_conv(ap, arg));
//	else if (!arg->f_field && arg->flag != '\0')
	else if (!arg->f_field)
	{
		arg->f_str = ft_strdup(ft_wchar_to_str((wchar_t)arg->flag));
		arg->length_f = ft_strlen(arg->f_str);
	}
	ft_putstr("after type conv\n");
	ft_putstr("f_str : ");
	ft_putendl(arg->f_str);
	if((arg->flag == 's' || arg->flag == 'S') && arg->p_field)
	{
		ft_strclr(arg->f_str + arg->precision);
		arg->length_f = ft_strlen(arg->f_str);
	}
	ft_putnbr(arg->length_f);
	ft_putendl(" : length_f before ft_length");
	arg->length_f = ft_length(arg, arg->f_str);
	
//	ft_putchar(arg->flag);
//	ft_putendl(" : flag");
	
//	ft_putnbr(arg->width);
//	ft_putendl(" : width");

	ft_putnbr(arg->length_f);
	ft_putendl(" : length_f");

//	ft_putnbr(arg->length_bf);
//	ft_putendl(" : length_bf");
//	ft_putstr("f_str after if: ");
//	ft_putendl(arg->f_str);

	arg->buf = ft_strnew(arg->length_bf + arg->length_f);
//	ft_putstr("f_str after strnew: ");
//	ft_putendl(arg->f_str);
	

//	ft_putstr("f_str before create buf: ");
//	ft_putendl(arg->f_str);
	
//	ft_putnbr(arg->length_f);
//	ft_putendl(" : length_f");

	if(arg->length_bf)
		arg->buf = ft_strncpy(arg->buf, arg->start_ptr, arg->length_bf);
//	ft_putstr(arg->buf);
//	ft_putstr(" : arg->buf after strncpy\n");

//	ft_putnbr(arg->space);
//	ft_putendl(" : arg->space");

	ft_create_buf(&arg->f_str, arg);

//	ft_putstr("buf after create buf : ");
//	ft_putendl(arg->buf);

	if (ft_strchr("cC", arg->flag) && *arg->f_str == '\0' && arg->f_field)
		ft_putnstr(arg->buf, arg->length_bf + arg->length_f);
	else 
		ft_putstr(arg->buf);

	//	*octet += (*octet == 0) ? ft_strlen(arg->buf) : ft_strlen(arg->buf) + 1;
//

//	*octet += ft_strlen(arg->buf);
//	*octet += arg->length_bf + arg->length_f;
	*octet += (ft_strchr("cC", arg->flag) && *arg->f_str == '\0') ? \
			  arg->length_bf + arg->length_f : ft_strlen(arg->buf);

	//	ft_putchar('\n');
//	ft_putnbr(*octet);
//	ft_putendl(" : octet");
//
	ft_strdel(&arg->buf);
	ft_strdel(&arg->f_str);
}

static void			ft_search_percent(const char **format, t_data *arg, \
		intmax_t *octet)
{
	arg->start_ptr = (char*)*format;
//	ft_putstr("\narg->start_ptr = ");
//	ft_putendl(arg->start_ptr);
	while (**format && **format != '%')
	{
		(*format)++;
		arg->length_bf++;
	}
	if (**format == '\0')
	{
		ft_putstr(arg->start_ptr);
		*octet += arg->length_bf;
	}
}

static int		ft_parse(const char *format, va_list *ap, int ret)
{
	t_data		arg;
	intmax_t	octet;

	ft_bzero(&arg, sizeof(arg));
	octet = 0;
	while (*format)
	{
		if (*format == '%')
		{
			ft_checks(ap, &format, &arg);
			ft_printf_build(ap, &arg, &octet);
			ft_bzero(&arg, sizeof(arg));
		}
		else
			ft_search_percent(&format, &arg, &octet);
	}
	return (octet);
}


int				ft_printf(const char *format, ...)
{
	intmax_t	octet;
	va_list		ap;

	va_start(ap, format);
	octet = ft_parse(format, &ap, 0);
	va_end(ap);
//	ft_putchar('\n');
//	ft_putnbr(octet);
//	ft_putendl(" : octet");
	return(octet);
}
